using System;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;

namespace Examples
{
    /// <summary>
    /// Interaction logic for AsyncAwait.xaml
    /// </summary>
    public partial class AsyncAwait : Window
    {
		#region Async Fields
		private string _asyncDialogFeedback;
		private DispatcherTimer _asyncElapsedTimer = new DispatcherTimer(DispatcherPriority.Send);
		private DateTime _startTime;
		#endregion

		public AsyncAwait()
		{
			InitializeComponent();
			InitializeElapsedTimer();
			ShowContent();
		}

		private void uiLaunchTask_Click(object sender, RoutedEventArgs e)
		{
			LaunchTask();
		}

		private async void LaunchTask()
		{
			Task<int> task = RunTask();
			ShowModalDialog();
			StartTimer();
			await task;
			Finished();			
		}

		public async Task<int> RunTask()
		{
			await Task.Run(() =>
			{
				DoWork();
			});
			return 0;
		}

		public void DoWork()
		{
			var iterations = 99999;
			for (int i = 0; i < iterations; i++)
			{
				//Required for UI to update while task is running
				App.Current.Dispatcher.Invoke((Action)delegate
				{
					_asyncDialogFeedback = $"Iteration {i}/{iterations}";
					Task.Delay(2500);
				});
			}
		}

		private void InitializeElapsedTimer()
		{
			_asyncElapsedTimer.Interval = new TimeSpan(0, 0, 0, 0, 250);
			_asyncElapsedTimer.Tick += _asyncElapsedTimer_Tick;
		}

		private void StartTimer()
		{
			_startTime = DateTime.Now;
			_asyncElapsedTimer.Start();
		}

		private void ShowContent()
		{
			uiScreen.Visibility = Visibility.Collapsed;
			uiDialog.Visibility = Visibility.Collapsed;
			uiCloseDialog.Visibility = Visibility.Collapsed;

			uiContent.Visibility = Visibility.Visible;
			uiContent.IsEnabled = true;
			uiContent.Effect = null;
		}

		private void ShowModalDialog()
		{
			uiContent.Effect = new BlurEffect { Radius = 1.5 };
			uiContent.IsEnabled = false;
			uiScreen.Visibility = Visibility.Visible;
			uiDialog.Visibility = Visibility.Visible;
		}

		private void Finished()
		{
			_asyncElapsedTimer.Stop();
			uiCloseDialog.Visibility = Visibility.Visible;
		}

		private void _asyncElapsedTimer_Tick(object sender, EventArgs e)
		{
			var timeSpan = DateTime.Now.Subtract(_startTime);
			uiDialogElapsedLabel.Content = $"I've been running for - {timeSpan.Hours}:{timeSpan.Minutes}:{timeSpan.Seconds}.{timeSpan.Milliseconds}";
			uiDialogFeedbackLabel.Content = _asyncDialogFeedback;
		}

		private void uiCloseDialog_Click(object sender, RoutedEventArgs e)
		{
			ShowContent();
		}
	}
}
