using LlamaSoft.Investigator.API.Helpers;
using Newtonsoft.Json;
using System;
using System.IO;

namespace LlamaSoft.Investigator.API.Serialization
{
    public class JSONSerializer : BaseSerializer
    {
        public override void ArchiveThing(Thing thing)
        {
            throw new NotImplementedException();
        }

        public override void DeleteThing(Thing thing)
        {
            throw new NotImplementedException();
        }

        public override Thing LoadThing(Guid id)
        {
            throw new NotImplementedException();
        }

        public override string SaveThing(Thing thing)
        {
            var fileName = FileIO.GetObjectJSONFileName(thing);
            Directory.CreateDirectory(Path.GetDirectoryName(fileName));
            File.WriteAllText(fileName, JsonConvert.SerializeObject(thing, Formatting.Indented));
            return fileName;
        }
    }
}




using System;

namespace LlamaSoft.Investigator.API.Serialization
{
    public interface ISerializable
    {
        Thing LoadThing(Guid id);
        string SaveThing(Thing thing);
        void DeleteThing(Thing thing);
        void ArchiveThing(Thing thing);
    }
}



using System;

namespace LlamaSoft.Investigator.API.Serialization
{
    /// <summary>
    /// This class is simply here so we can pass around generic objects
    /// </summary>
    public abstract class BaseSerializer : ISerializable
    {
        #region Implement Serializable Methods
        public virtual void ArchiveThing(Thing thing)
        {
            throw new NotImplementedException();
        }

        public virtual void DeleteThing(Thing thing)
        {
            throw new NotImplementedException();
        }

        public virtual Thing LoadThing(Guid id)
        {
            throw new NotImplementedException();
        }

        public virtual string SaveThing(Thing thing)
        {
            throw new NotImplementedException();
        }
        #endregion
    }
}


using System;

namespace LlamaSoft.Investigator.API.Information
{
    public class Incident : Thing
    {
        #region Overloaded ISerializable Methods
        public void Archive()
        {
            base.ArchiveThing(this);
        }

        public void Delete()
        {
            base.DeleteThing(this);
        }

        public Incident Load(Guid id)
        {
            return base.LoadThing(id) as Incident;
        }

        public string Save()
        {
            return SaveThing(this);
        }
        #endregion
    }
}




using LlamaSoft.Investigator.API.Serialization;
using System;
using System.Collections.Generic;

namespace LlamaSoft.Investigator.API
{
    public class Thing : ISerializable
    {
        private Guid _id;
        public Guid ID
        {
            get
            {
                _id = _id == Guid.Empty ? Guid.NewGuid() : _id;
                return _id;
            }
            set { _id = value; }
        }
        public virtual string DisplayName { get; set; }
        public DateTime DateCreated { get; set; }
        public DateTime DateModified { get; set; }
        public Guid CreatedBy { get; set; }
        public Guid ModifiedBy { get; set; }
        public List<Guid> ConnectionIds { get; set; } = new List<Guid>();
        public string Notes { get; set; }

        #region Implement ISerializable Methods
        public void ArchiveThing(Thing thing)
        {
            throw new NotImplementedException();
        }
        public void DeleteThing(Thing thing)
        {
            throw new NotImplementedException();
        }
        public Thing LoadThing(Guid id)
        {
            throw new NotImplementedException();
        }
        public string SaveThing(Thing thing)
        {
            var serializer = Globals.GetSerializer();
            return serializer.SaveThing(thing);
        }
        #endregion
    }
}
