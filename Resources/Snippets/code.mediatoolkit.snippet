public static class VideoCaptureTools
    {
        public static BitmapImage CaptureImage(FileInfo videoFile, int captureFrame, int? maxLength)
        {
            var capturedBitmapImage = new BitmapImage();
            using (var videoFileReader = new VideoFileReader())
            {
                videoFileReader.Open(videoFile.FullName);
                var framesPer = Convert.ToInt32(Math.Round(videoFileReader.FrameRate.ToDouble()));
                Bitmap capturedImage = videoFileReader.ReadVideoFrame(captureFrame);
                if (maxLength.HasValue)
                {
                    capturedImage = ResizeImage(capturedImage, maxLength.Value);
                }
                MemoryStream memoryStream = new MemoryStream();
                capturedImage.Save(memoryStream, ImageFormat.Bmp);

                capturedBitmapImage.BeginInit();
                memoryStream.Seek(0, SeekOrigin.Begin);
                capturedBitmapImage.StreamSource = memoryStream;
                capturedBitmapImage.EndInit();
            }
            return capturedBitmapImage;
        }

        public static BitmapImage CaptureImage(FileInfo videoFile, int captureFrame)
        {
            return CaptureImage(videoFile, captureFrame, null);
        }

        public static double GetFrameRate(FileInfo videoFile)
        {
            var frameRate = 0d;
            using(var videoFileReader = new VideoFileReader())
            {
                videoFileReader.Open(videoFile.FullName);
                frameRate = videoFileReader.FrameRate.ToDouble();
            }
            return frameRate;
        }

        public static Bitmap ResizeImage(Image image, int maxLength)
        {
            var newSize = GetNewSize(maxLength, image.Width, image.Height);
            var destRect = new Rectangle(0, 0, newSize.Width, newSize.Height);

            var destImage = new Bitmap(newSize.Width, newSize.Height);
            destImage.SetResolution(image.HorizontalResolution, image.VerticalResolution);

            using (var graphics = Graphics.FromImage(destImage))
            {
                graphics.CompositingMode = CompositingMode.SourceCopy;
                graphics.CompositingQuality = CompositingQuality.HighQuality;
                graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                graphics.SmoothingMode = SmoothingMode.HighQuality;
                graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

                using (var wrapMode = new ImageAttributes())
                {
                    wrapMode.SetWrapMode(WrapMode.TileFlipXY);
                    graphics.DrawImage(image, destRect, 0, 0, image.Width, image.Height, GraphicsUnit.Pixel, wrapMode);
                }
            }
            return destImage;
        }

        public static Size GetNewSize(int maxLength, int originalWidth, int originalHeight)
        {
            var newWidth = originalWidth;
            var newHeight = originalHeight;
            var ratio = 0.25d;

            if (originalWidth > originalHeight) 
            { 
                newWidth = maxLength;
                if (originalWidth > maxLength)
                {
                    ratio = (double) maxLength/ originalWidth;
                    newHeight = Convert.ToInt32(Math.Floor(originalHeight * ratio));
                }
                else
                {
                    ratio = (double) originalWidth / maxLength;
                    newHeight = Convert.ToInt32(Math.Floor(originalHeight * ratio));
                }
            }
            else 
            { 
                newHeight = maxLength;
                if (originalHeight > maxLength)
                {
                    ratio = (double) maxLength / originalHeight;
                    newWidth = Convert.ToInt32(Math.Floor(originalWidth * ratio));
                }
                else
                {
                    ratio = (double) originalHeight / maxLength;
                    newWidth = Convert.ToInt32(Math.Floor(originalWidth * ratio));
                }
            }
            return new Size(newWidth, newHeight);
        }

        public static TimeSpan GetDuration(FileInfo videoFile)
        {
            var captureDuration = new TimeSpan();
            using (var shell = ShellObject.FromParsingName(videoFile.FullName))
            {
                captureDuration = TimeSpan.FromTicks(Convert.ToInt64(shell.Properties.System.Media.Duration.ValueAsObject));
            }
            return captureDuration;
        }
    }