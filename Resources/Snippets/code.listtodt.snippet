//Converts a generic list to a DataTable.
//
//While working with the Nuget API, I came across code that was inconsistently named.
//In one class the column might be "ID" whereas a different but similar class uses "StateID"
//That discrepency caused this mapping to break, so I added optional parameters that
//let you identify a property that you want to rename during the mapping. This only allows
//you to change one property, but that is all I needed at the time. This could be updated
//to allow for more complex re-mapping at a later date
public static DataTable DataTableFromList<T>(List<T> list, string existingPropertyName = "", string newMappedPropertyName = "")
{
	//Create a new data table
	var dataTable = new DataTable();

	//Get all the properties of the list (List<T>)
	PropertyInfo[] myPropertyInfo;
	myPropertyInfo = typeof(T).GetProperties();

	//Add a column to the DataTable for each property
	for (int i = 0; i < myPropertyInfo.Length; i++)
	{
		var columnName = myPropertyInfo[i].Name;

		#region (Optionally) Replace a column name
		if (!string.IsNullOrWhiteSpace(existingPropertyName) && !string.IsNullOrWhiteSpace(newMappedPropertyName))
		{
			if (columnName == newMappedPropertyName)
			{
				columnName = existingPropertyName;
			}
		}
		#endregion

		dataTable.Columns.Add(columnName);
	}

	//The columns are built, so now we loop over the
	//list, adding a row for each item in the list
	foreach (var item in list)
	{
		var row = dataTable.NewRow();
		for (int i = 0; i < myPropertyInfo.Length; i++)
		{
			var columnName = myPropertyInfo[i].Name;

			#region (Optionally) Replace a column name
			if (!string.IsNullOrWhiteSpace(existingPropertyName) && !string.IsNullOrWhiteSpace(newMappedPropertyName))
			{
				if (columnName == newMappedPropertyName)
				{
					columnName = existingPropertyName;
				}
			}
			#endregion

			var columnValue = myPropertyInfo[i].GetValue(item, null);
			row[columnName] = columnValue;
		}
		dataTable.Rows.Add(row);
	}
	
	return dataTable;
}

//Gets nodes for a TreeView and recursively gets 
//all nodes for child nodes
public static List<TreeNode> GetAllNodes(this TreeView _self)
{
	List<TreeNode> result = new List<TreeNode>();
	foreach (TreeNode child in _self.Nodes)
	{
		result.AddRange(child.GetAllNodes());
	}
	return result;
}

//Recursive methode to get all child nodes
public static List<TreeNode> GetAllNodes(this TreeNode _self)
{
	List<TreeNode> result = new List<TreeNode>();
	result.Add(_self);
	foreach (TreeNode child in _self.Nodes)
	{
		result.AddRange(child.GetAllNodes());
	}
	return result;
}